AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: AGENDEMAIS Backend - Sistema de Agendamento

Globals:
  Function:
    Timeout: 30
    Runtime: nodejs18.x
    Environment:
      Variables:
        USERS_TABLE: !Ref UsersTable
        APPOINTMENTS_TABLE: !Ref AppointmentsTable
        PAYMENTS_TABLE: !Ref PaymentsTable
        CORS_ORIGIN: '*'
        JWT_SECRET: 'agendemais-secret-key-2024'
        FRONTEND_URL: 'https://main.d31iho7gw23enq.amplifyapp.com'
        PIX_CHAVE_CPF: '05359566493'
        PIX_BENEFICIARIO: 'Leandro Jesse da Silva'
        PIX_BANCO: 'Banco PAM'

Resources:
  # DynamoDB Tables
  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: agendemais-users
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: email
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: email-index
          KeySchema:
            - AttributeName: email
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  AppointmentsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: agendemais-appointments
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: userId
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: userId-index
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  PaymentsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: agendemais-payments
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: userId
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: userId-index
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  # API Gateway
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      Cors:
        AllowMethods: "'*'"
        AllowHeaders: "'*'"
        AllowOrigin: "'*'"

  # Lambda Functions
  AuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/functions/auth/
      Handler: index.handler
      Events:
        LoginApi:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /auth/login
            Method: post
        RegisterApi:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /auth/register
            Method: post
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable

  AppointmentsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/functions/appointments/
      Handler: index.handler
      Events:
        GetAppointments:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /appointments
            Method: get
        CreateAppointment:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /appointments
            Method: post
        UpdateAppointment:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /appointments/{id}
            Method: put
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref AppointmentsTable

  DashboardFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/functions/dashboard/
      Handler: index.handler
      Events:
        GetStats:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /dashboard/stats
            Method: get
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref AppointmentsTable

  PaymentsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/functions/payments/
      Handler: index.handler
      Environment:
        Variables:
          STRIPE_SECRET_KEY: '{{resolve:secretsmanager:agendemais/payments:SecretString:STRIPE_SECRET_KEY}}'
          OPENPIX_APP_ID: '{{resolve:secretsmanager:agendemais/payments:SecretString:OPENPIX_APP_ID}}'
      Events:
        CreatePixPayment:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /payments/pix
            Method: post
        CreateStripePayment:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /payments/stripe
            Method: post
        GetPaymentHistory:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /payments/history
            Method: get
        GetPaymentStatus:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /payments/{id}/status
            Method: get
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PaymentsTable

  WebhooksFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/functions/webhooks/
      Handler: index.handler
      Environment:
        Variables:
          STRIPE_SECRET_KEY: '{{resolve:secretsmanager:agendemais/payments:SecretString:STRIPE_SECRET_KEY}}'
          STRIPE_WEBHOOK_SECRET: '{{resolve:secretsmanager:agendemais/payments:SecretString:STRIPE_WEBHOOK_SECRET}}'
          PIX_WEBHOOK_SECRET: '{{resolve:secretsmanager:agendemais/payments:SecretString:PIX_WEBHOOK_SECRET}}'
      Events:
        PixWebhook:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /webhooks/pix
            Method: post
        StripeWebhook:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /webhooks/stripe
            Method: post
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PaymentsTable

Outputs:
  ApiUrl:
    Description: API Gateway endpoint URL
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod/"