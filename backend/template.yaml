AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  AgendaFÃ¡cil SaaS - Backend

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - staging
      - prod
    Description: Environment name
  
  DynamoDBTableName:
    Type: String
    Default: AgendaFacilTable
    Description: Name of the DynamoDB table

Globals:
  Function:
    Timeout: 10
    MemorySize: 256
    Runtime: nodejs18.x
    Architectures:
      - x86_64
    Environment:
      Variables:
        ENVIRONMENT: !Ref Environment
        DYNAMODB_TABLE: !Ref DynamoDBTableName
        AWS_REGION: !Ref AWS::Region

Resources:
  # API Gateway
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Environment
      Cors:
        AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"
      Auth:
        DefaultAuthorizer: JwtAuthorizer
        Authorizers:
          JwtAuthorizer:
            JwtConfiguration:
              issuer: !Sub "https://cognito-idp.${AWS::Region}.amazonaws.com/${UserPool}"
              audience:
                - !Ref UserPoolClient
      GatewayResponses:
        DEFAULT_4XX:
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: "'*'"
              Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
        DEFAULT_5XX:
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: "'*'"
              Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"

  # Health Check Endpoint
  HealthFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/health/
      Handler: index.handler
      Events:
        Health:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /health
            Method: get
            Auth:
              Authorizer: NONE
      Environment:
        Variables:
          REGION: !Ref AWS::Region

  # Auth Functions
  AuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/auth/
      Handler: index.handler
      Events:
        Login:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /auth/login
            Method: post
            Auth:
              Authorizer: NONE
        Register:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /auth/register
            Method: post
            Auth:
              Authorizer: NONE
      Environment:
        Variables:
          USER_POOL_ID: !Ref UserPool
          USER_POOL_CLIENT_ID: !Ref UserPoolClient
      Policies:
        - AmazonCognitoPowerUser

  # Appointments Functions
  AppointmentsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/appointments/
      Handler: index.handler
      Events:
        GetAll:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /appointments
            Method: get
        GetOne:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /appointments/{id}
            Method: get
        Create:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /appointments
            Method: post
        Update:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /appointments/{id}
            Method: put
        Delete:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /appointments/{id}
            Method: delete
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoDBTableName

  # Services Functions
  ServicesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/services/
      Handler: index.handler
      Events:
        GetAll:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /services
            Method: get
        GetOne:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /services/{id}
            Method: get
        Create:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /services
            Method: post
        Update:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /services/{id}
            Method: put
        Delete:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /services/{id}
            Method: delete
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoDBTableName

  # Tenant Functions
  TenantFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/tenant/
      Handler: index.handler
      Events:
        GetConfig:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /tenants/config
            Method: get
        UpdateConfig:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /tenants/config
            Method: put
        Create:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /tenants/create
            Method: post
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoDBTableName

  # Cognito User Pool
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub "${AWS::StackName}-users"
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: name
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: tenantId
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: plan
          AttributeDataType: String
          Mutable: true
          Required: false

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      ClientName: !Sub "${AWS::StackName}-app-client"
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_SRP_AUTH

Outputs:
  ApiEndpoint:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}"
  
  UserPoolId:
    Description: "Cognito User Pool ID"
    Value: !Ref UserPool
  
  UserPoolClientId:
    Description: "Cognito User Pool Client ID"
    Value: !Ref UserPoolClient
  
  Region:
    Description: "AWS Region"
    Value: !Ref AWS::Region