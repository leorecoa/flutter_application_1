AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: AgendaFacil SaaS - Serverless Backend
Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
    - dev
    - staging
    - prod
  CognitoDomainPrefix:
    Type: String
    Default: agenda-facil-dev
Globals:
  Function:
    Timeout: 30
    Runtime: nodejs18.x
    Environment:
      Variables:
        DYNAMODB_TABLE:
          Ref: MainTable
        COGNITO_USER_POOL_ID:
          Ref: UserPool
        ENVIRONMENT:
          Ref: Environment
Resources:
  MainTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName:
        Fn::Sub: agenda-facil-${Environment}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
      - AttributeName: PK
        AttributeType: S
      - AttributeName: SK
        AttributeType: S
      - AttributeName: GSI1PK
        AttributeType: S
      - AttributeName: GSI1SK
        AttributeType: S
      KeySchema:
      - AttributeName: PK
        KeyType: HASH
      - AttributeName: SK
        KeyType: RANGE
      GlobalSecondaryIndexes:
      - IndexName: GSI1
        KeySchema:
        - AttributeName: GSI1PK
          KeyType: HASH
        - AttributeName: GSI1SK
          KeyType: RANGE
        Projection:
          ProjectionType: ALL
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName:
        Fn::Sub: agenda-facil-${Environment}
      AutoVerifiedAttributes:
      - email
      UsernameAttributes:
      - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
      Schema:
      - Name: email
        AttributeDataType: String
        Required: true
      - Name: name
        AttributeDataType: String
        Required: true
      - Name: phone_number
        AttributeDataType: String
        Required: false
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId:
        Ref: UserPool
      ClientName:
        Fn::Sub: agenda-facil-client-${Environment}
      GenerateSecret: false
      ExplicitAuthFlows:
      - ADMIN_NO_SRP_AUTH
      - USER_PASSWORD_AUTH
      TokenValidityUnits:
        AccessToken: hours
        IdToken: hours
        RefreshToken: days
      AccessTokenValidity: 24
      IdTokenValidity: 24
      RefreshTokenValidity: 30
  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain:
        Ref: CognitoDomainPrefix
      UserPoolId:
        Ref: UserPool
  FilesBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Sub: agenda-facil-files-${Environment}-${AWS::AccountId}
      CorsConfiguration:
        CorsRules:
        - AllowedHeaders:
          - '*'
          AllowedMethods:
          - GET
          - PUT
          - POST
          - DELETE
          AllowedOrigins:
          - '*'
          MaxAge: 3000
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
  AuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: agenda-facil-auth-${Environment}
      CodeUri: AuthFunction
      Handler: index.handler
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: MainTable
      - Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - cognito-idp:AdminCreateUser
          - cognito-idp:AdminSetUserPassword
          - cognito-idp:AdminInitiateAuth
          - cognito-idp:AdminGetUser
          Resource:
            Fn::GetAtt:
            - UserPool
            - Arn
      Events:
        AuthApi:
          Type: Api
          Properties:
            RestApiId:
              Ref: ApiGateway
            Path: /auth/{proxy+}
            Method: ANY
    Metadata:
      SamResourceId: AuthFunction
  UsersFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: agenda-facil-users-${Environment}
      CodeUri: UsersFunction
      Handler: index.handler
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: MainTable
      Events:
        UsersApi:
          Type: Api
          Properties:
            RestApiId:
              Ref: ApiGateway
            Path: /users/{proxy+}
            Method: ANY
    Metadata:
      SamResourceId: UsersFunction
  ServicesFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: agenda-facil-services-${Environment}
      CodeUri: ServicesFunction
      Handler: index.handler
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: MainTable
      Events:
        ServicesApi:
          Type: Api
          Properties:
            RestApiId:
              Ref: ApiGateway
            Path: /services/{proxy+}
            Method: ANY
    Metadata:
      SamResourceId: ServicesFunction
  AppointmentsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: agenda-facil-appointments-${Environment}
      CodeUri: AppointmentsFunction
      Handler: index.handler
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: MainTable
      Events:
        AppointmentsApi:
          Type: Api
          Properties:
            RestApiId:
              Ref: ApiGateway
            Path: /appointments/{proxy+}
            Method: ANY
    Metadata:
      SamResourceId: AppointmentsFunction
  BookingFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: agenda-facil-booking-${Environment}
      CodeUri: BookingFunction
      Handler: index.handler
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: MainTable
      Events:
        BookingApi:
          Type: Api
          Properties:
            RestApiId:
              Ref: ApiGateway
            Path: /booking/{proxy+}
            Method: ANY
    Metadata:
      SamResourceId: BookingFunction
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name:
        Fn::Sub: agenda-facil-api-${Environment}
      StageName:
        Ref: Environment
      Cors:
        AllowMethods: '''GET,POST,PUT,DELETE,OPTIONS'''
        AllowHeaders: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
        AllowOrigin: '''*'''
Outputs:
  ApiGatewayUrl:
    Description: API Gateway URL
    Value:
      Fn::Sub: https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-ApiUrl
  UserPoolId:
    Description: Cognito User Pool ID
    Value:
      Ref: UserPool
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-UserPoolId
  UserPoolClientId:
    Description: Cognito User Pool Client ID
    Value:
      Ref: UserPoolClient
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-UserPoolClientId
  DynamoDBTable:
    Description: DynamoDB Table Name
    Value:
      Ref: MainTable
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-TableName
  S3Bucket:
    Description: S3 Bucket for files
    Value:
      Ref: FilesBucket
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-FilesBucket
