#!/bin/bash

# AGENDEMAIS - Deploy Script para Pagamentos PIX e Stripe
# Este script faz o deploy completo das fun√ß√µes de pagamento no AWS

set -e

echo "üöÄ AGENDEMAIS - Deploy de Pagamentos PIX e Stripe"
echo "================================================="

# Verificar se estamos no diret√≥rio correto
if [ ! -f "template.yaml" ]; then
    echo "‚ùå Erro: Execute este script no diret√≥rio backend/"
    exit 1
fi

# Verificar se SAM CLI est√° instalado
if ! command -v sam &> /dev/null; then
    echo "‚ùå SAM CLI n√£o est√° instalado. Instale primeiro:"
    echo "   https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/install-sam-cli.html"
    exit 1
fi

# Verificar se AWS CLI est√° configurado
if ! aws sts get-caller-identity &> /dev/null; then
    echo "‚ùå AWS CLI n√£o est√° configurado. Execute 'aws configure' primeiro."
    exit 1
fi

echo "‚úÖ Pr√©-requisitos verificados"

# Instalar depend√™ncias das fun√ß√µes Lambda
echo "üì¶ Instalando depend√™ncias das fun√ß√µes Lambda..."

echo "   ‚Üí Payments function..."
cd src/functions/payments
npm install --production
cd ../../../

echo "   ‚Üí Webhooks function..."
cd src/functions/webhooks  
npm install --production
cd ../../../

echo "   ‚Üí Auth function..."
cd src/functions/auth
npm install --production --ignore-optional
cd ../../../

echo "   ‚Üí Appointments function..."
cd src/functions/appointments
npm install --production --ignore-optional 2>/dev/null || echo "     (Depend√™ncias j√° instaladas ou n√£o necess√°rias)"
cd ../../../

echo "   ‚Üí Dashboard function..."
cd src/functions/dashboard
npm install --production --ignore-optional 2>/dev/null || echo "     (Depend√™ncias j√° instaladas ou n√£o necess√°rias)"
cd ../../../

echo "‚úÖ Depend√™ncias instaladas"

# Verificar se o secret existe no Secrets Manager
echo "üîê Verificando AWS Secrets Manager..."
if aws secretsmanager describe-secret --secret-id agendemais/payments &> /dev/null; then
    echo "‚úÖ Secret 'agendemais/payments' encontrado"
else
    echo "‚ö†Ô∏è  Secret 'agendemais/payments' n√£o encontrado"
    echo "   Criando secret b√°sico..."
    
    aws secretsmanager create-secret \
        --name agendemais/payments \
        --description "AGENDEMAIS Payment Secrets" \
        --secret-string '{
            "STRIPE_SECRET_KEY": "sk_test_CHANGE_ME",
            "STRIPE_WEBHOOK_SECRET": "whsec_CHANGE_ME",
            "OPENPIX_APP_ID": "CHANGE_ME",
            "PIX_WEBHOOK_SECRET": "CHANGE_ME"
        }' || echo "   (Secret pode j√° existir)"
    
    echo "‚ö†Ô∏è  IMPORTANTE: Configure as chaves reais no Secrets Manager:"
    echo "   aws secretsmanager update-secret --secret-id agendemais/payments --secret-string '...'"
fi

# Build SAM
echo "üî® Construindo aplica√ß√£o SAM..."
sam build --use-container

if [ $? -ne 0 ]; then
    echo "‚ùå Erro no build. Verifique os logs acima."
    exit 1
fi

echo "‚úÖ Build conclu√≠do"

# Deploy
echo "üöÄ Fazendo deploy..."

# Verificar se √© primeira vez ou update
STACK_NAME="agendemais-backend"
if aws cloudformation describe-stacks --stack-name $STACK_NAME &> /dev/null; then
    echo "   Stack existe, fazendo update..."
    sam deploy --stack-name $STACK_NAME --capabilities CAPABILITY_IAM --no-confirm-changeset
else
    echo "   Primeira vez, fazendo deploy guiado..."
    sam deploy --guided --stack-name $STACK_NAME
fi

if [ $? -ne 0 ]; then
    echo "‚ùå Erro no deploy. Verifique os logs acima."
    exit 1
fi

# Obter URL da API
echo "üìã Obtendo informa√ß√µes do deploy..."
API_URL=$(aws cloudformation describe-stacks \
    --stack-name $STACK_NAME \
    --query 'Stacks[0].Outputs[?OutputKey==`ApiUrl`].OutputValue' \
    --output text)

if [ "$API_URL" != "None" ] && [ ! -z "$API_URL" ]; then
    echo ""
    echo "üéâ Deploy conclu√≠do com sucesso!"
    echo "================================="
    echo ""
    echo "üì° API Gateway URL: $API_URL"
    echo ""
    echo "üîó Endpoints dispon√≠veis:"
    echo "   POST $API_URL/payments/pix"
    echo "   POST $API_URL/payments/stripe"
    echo "   GET  $API_URL/payments/history"
    echo "   GET  $API_URL/payments/{id}/status"
    echo "   POST $API_URL/webhooks/pix"
    echo "   POST $API_URL/webhooks/stripe"
    echo ""
    echo "‚öôÔ∏è  Pr√≥ximos passos:"
    echo "   1. Configure os webhooks:"
    echo "      ‚Ä¢ Stripe: $API_URL/webhooks/stripe"
    echo "      ‚Ä¢ OpenPix: $API_URL/webhooks/pix"
    echo ""
    echo "   2. Atualize as chaves no Secrets Manager:"
    echo "      aws secretsmanager update-secret --secret-id agendemais/payments --secret-string '{...}'"
    echo ""
    echo "   3. Configure vari√°veis no Amplify Frontend:"
    echo "      AWS_API_ENDPOINT=$API_URL"
    echo ""
    echo "   4. Teste os endpoints:"
    echo "      curl -X POST $API_URL/payments/pix -H 'Authorization: Bearer TOKEN' -d '{...}'"
else
    echo "‚ö†Ô∏è  Deploy conclu√≠do, mas n√£o foi poss√≠vel obter a URL da API"
    echo "   Verifique no console AWS CloudFormation"
fi

echo ""
echo "üìä Recursos criados:"
echo "   ‚Ä¢ Tabela DynamoDB: agendemais-payments"
echo "   ‚Ä¢ Fun√ß√µes Lambda: PaymentsFunction, WebhooksFunction"
echo "   ‚Ä¢ API Gateway com endpoints REST"
echo "   ‚Ä¢ Roles IAM com permiss√µes m√≠nimas"
echo ""
echo "üîç Para monitorar:"
echo "   ‚Ä¢ CloudWatch Logs: /aws/lambda/agendemais-*"
echo "   ‚Ä¢ DynamoDB Console: agendemais-payments table"
echo "   ‚Ä¢ API Gateway Console: agendemais-backend"
echo ""
echo "‚úÖ AGENDEMAIS pagamentos prontos para produ√ß√£o!"