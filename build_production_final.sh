#!/bin/bash

# AGENDEMAIS - Script de Build Final para Produ√ß√£o
# Este script constr√≥i o app com todas as otimiza√ß√µes e configura√ß√µes AWS reais

set -e

echo "üöÄ AGENDEMAIS - BUILD FINAL PARA PRODU√á√ÉO"
echo "=========================================="

# Verificar se Flutter est√° instalado
if ! command -v flutter &> /dev/null; then
    echo "‚ùå Flutter n√£o est√° instalado ou n√£o est√° no PATH"
    exit 1
fi

# Verificar vers√£o do Flutter
echo "üìã Verificando vers√£o do Flutter..."
flutter --version

# Limpar builds anteriores
echo "üßπ Limpando builds anteriores..."
flutter clean
rm -rf build/

# Instalar depend√™ncias
echo "üì¶ Instalando depend√™ncias..."
flutter pub get

# Analisar c√≥digo
echo "üîç Analisando c√≥digo..."
flutter analyze --no-fatal-infos --no-fatal-warnings

# Verificar se as vari√°veis de ambiente est√£o definidas
echo "üîß Verificando vari√°veis de ambiente..."
if [ -z "$AWS_API_ENDPOINT" ]; then
    echo "‚ö†Ô∏è  AWS_API_ENDPOINT n√£o definido, usando default"
fi
if [ -z "$COGNITO_USER_POOL_ID" ]; then
    echo "‚ö†Ô∏è  COGNITO_USER_POOL_ID n√£o definido"
fi
if [ -z "$COGNITO_APP_CLIENT_ID" ]; then
    echo "‚ö†Ô∏è  COGNITO_APP_CLIENT_ID n√£o definido"
fi
if [ -z "$COGNITO_IDENTITY_POOL_ID" ]; then
    echo "‚ö†Ô∏è  COGNITO_IDENTITY_POOL_ID n√£o definido"
fi

# Build para produ√ß√£o com todas as otimiza√ß√µes
echo "üåê Construindo para produ√ß√£o com otimiza√ß√µes completas..."
flutter build web \
    --release \
    --tree-shake-icons \
    --dart-define=FLUTTER_WEB_USE_SKIA=false \
    --dart-define=FLUTTER_WEB_AUTO_DETECT=true \
    --web-renderer canvaskit \
    --pwa-strategy offline-first \
    --base-href="/" \
    --source-maps \
    --dart-define=AWS_API_ENDPOINT="${AWS_API_ENDPOINT:-https://5wy56rw801.execute-api.us-east-1.amazonaws.com/prod}" \
    --dart-define=COGNITO_USER_POOL_ID="${COGNITO_USER_POOL_ID:-}" \
    --dart-define=COGNITO_APP_CLIENT_ID="${COGNITO_APP_CLIENT_ID:-}" \
    --dart-define=COGNITO_IDENTITY_POOL_ID="${COGNITO_IDENTITY_POOL_ID:-}" \
    --dart-define=AWS_REGION="${AWS_REGION:-us-east-1}"

# Verificar se o build foi bem-sucedido
if [ ! -f "build/web/index.html" ]; then
    echo "‚ùå Build falhou: index.html n√£o encontrado"
    exit 1
fi

if [ ! -f "build/web/main.dart.js" ]; then
    echo "‚ùå Build falhou: main.dart.js n√£o encontrado"
    exit 1
fi

# Copiar arquivos de configura√ß√£o para produ√ß√£o
echo "üìã Copiando arquivos de configura√ß√£o..."
cp web/.htaccess build/web/ 2>/dev/null || echo "‚ö†Ô∏è  .htaccess n√£o encontrado"
cp web/app.yaml build/web/ 2>/dev/null || echo "‚ö†Ô∏è  app.yaml n√£o encontrado"

# Verificar tamanho do bundle
BUNDLE_SIZE=$(du -sh build/web/main.dart.js | cut -f1)
echo "üìè Tamanho do bundle: $BUNDLE_SIZE"

# Verificar assets PWA
echo "üîç Verificando recursos PWA..."
if [ -f "build/web/manifest.json" ]; then
    echo "‚úÖ manifest.json encontrado"
else
    echo "‚ùå manifest.json N√ÉO encontrado"
fi

if [ -f "build/web/sw.js" ]; then
    echo "‚úÖ Service Worker encontrado"
else
    echo "‚ùå Service Worker N√ÉO encontrado"
fi

# Verificar estrutura de arquivos cr√≠ticos
echo "üìÅ Verificando estrutura de arquivos..."
for file in "index.html" "main.dart.js" "flutter.js" "flutter_bootstrap.js"; do
    if [ -f "build/web/$file" ]; then
        echo "‚úÖ $file"
    else
        echo "‚ùå $file N√ÉO encontrado"
    fi
done

# Verificar se h√° dados mocados no build (seguran√ßa)
echo "üîí Verificando seguran√ßa - procurando dados mocados..."
if grep -r "mock\|test\|dummy" build/web/ --exclude="*.map" --exclude="*.js.map" &> /dev/null; then
    echo "‚ö†Ô∏è  ATEN√á√ÉO: Encontrados dados de teste/mock no build de produ√ß√£o"
    echo "    Execute: grep -r 'mock\|test\|dummy' build/web/ --exclude='*.map'"
else
    echo "‚úÖ Nenhum dado de teste encontrado"
fi

# Atualizar vers√£o do service worker
echo "üîÑ Atualizando vers√£o do service worker..."
if [ -f "build/web/sw.js" ]; then
    BUILD_VERSION=$(date +%Y%m%d-%H%M%S)
    sed -i.bak "s/agendemais-production-v[0-9]\+\.[0-9]\+/agendemais-production-v$BUILD_VERSION/" build/web/sw.js
    rm -f build/web/sw.js.bak
    echo "‚úÖ Service Worker atualizado para vers√£o: $BUILD_VERSION"
fi

# Gerar informa√ß√µes do build
echo "üìù Gerando informa√ß√µes do build..."
cat > build/web/build-info.json << EOF
{
  "buildTime": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
  "version": "1.0.0",
  "environment": "production",
  "gitCommit": "$(git rev-parse --short HEAD 2>/dev/null || echo 'unknown')",
  "buildNumber": "$(date +%Y%m%d%H%M%S)",
  "bundleSize": "$BUNDLE_SIZE",
  "awsEndpoint": "${AWS_API_ENDPOINT:-default}",
  "awsRegion": "${AWS_REGION:-us-east-1}"
}
EOF

# Criar pacote de deployment
echo "üì¶ Criando pacote de deployment..."
cd build/web
PACKAGE_NAME="agendemais-production-$(date +%Y%m%d-%H%M%S).tar.gz"
tar -czf "../$PACKAGE_NAME" .
cd ../../

echo ""
echo "üéâ BUILD DE PRODU√á√ÉO CONCLU√çDO COM SUCESSO!"
echo "==========================================="
echo ""
echo "üìä Resumo do Build:"
echo "   ‚Ä¢ Diret√≥rio de sa√≠da: build/web/"
echo "   ‚Ä¢ Tamanho do bundle: $BUNDLE_SIZE"
echo "   ‚Ä¢ Pacote: build/$PACKAGE_NAME"
echo "   ‚Ä¢ PWA: $([ -f "build/web/manifest.json" ] && echo "‚úÖ Habilitado" || echo "‚ùå Erro")"
echo ""
echo "üöÄ Pr√≥ximos Passos:"
echo "   1. Teste local: cd build/web && python -m http.server 8080"
echo "   2. Deploy para Amplify: Fa√ßa upload do conte√∫do de build/web/"
echo "   3. Configure vari√°veis de ambiente no Amplify:"
echo "      - AWS_API_ENDPOINT=$AWS_API_ENDPOINT"
echo "      - COGNITO_USER_POOL_ID=$COGNITO_USER_POOL_ID"
echo "      - COGNITO_APP_CLIENT_ID=$COGNITO_APP_CLIENT_ID"
echo "      - COGNITO_IDENTITY_POOL_ID=$COGNITO_IDENTITY_POOL_ID"
echo ""
echo "üîß Verifica√ß√µes Finais:"
echo "   ‚Ä¢ Teste PWA: Verifique se https://main.d31iho7gw23enq.amplifyapp.com/manifest.json est√° acess√≠vel"
echo "   ‚Ä¢ Teste instala√ß√£o: Abra o site no Chrome/Edge e verifique prompt de instala√ß√£o"
echo "   ‚Ä¢ Teste autentica√ß√£o: Fa√ßa login e verifique se conecta com Cognito"
echo "   ‚Ä¢ Teste APIs: Verifique se todas as chamadas v√£o para os endpoints AWS reais"
echo ""
echo "‚úÖ AGENDEMAIS est√° pronto para PRODU√á√ÉO REAL!"
echo "   Sem dados mocados ‚Ä¢ APIs AWS conectadas ‚Ä¢ PWA funcional ‚Ä¢ Otimizado"