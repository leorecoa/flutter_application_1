name: Flutter CI/CD with SonarCloud

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-test-analyze:
    name: Build, Test & Analyze
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for better SonarCloud analysis
      
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.10.0'
          channel: 'stable'
          cache: true
      
      - name: Cache pub dependencies
        uses: actions/cache@v3
        with:
          path: ${{ env.PUB_CACHE }}
          key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: ${{ runner.os }}-pub-
      
      - name: Install dependencies
        run: flutter pub get
      
      - name: Verify formatting
        run: flutter format --set-exit-if-changed .
      
      - name: Analyze project source
        run: flutter analyze
      
      - name: Run tests with coverage
        run: flutter test --coverage
      
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=leorecoa_flutter_application_1
            -Dsonar.organization=leorecoa
            -Dsonar.sources=lib
            -Dsonar.tests=test
            -Dsonar.dart.analyzer.reportPaths=analyze-report.json
            -Dsonar.flutter.coverage.reportPath=coverage/lcov.info
            -Dsonar.coverage.exclusions=**/*.g.dart,**/*.freezed.dart,**/generated/**/*
            -Dsonar.cpd.exclusions=**/*.g.dart,**/*.freezed.dart
            -Dsonar.qualitygate.wait=true

  deploy:
    name: Deploy to AWS Amplify
    needs: build-test-analyze
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.10.0'
          channel: 'stable'
          cache: true
      
      - name: Install dependencies
        run: flutter pub get
      
      - name: Build web
        run: flutter build web --release
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Deploy to Amplify
        run: |
          # Zip the build output
          cd build/web
          zip -r ../../build.zip *
          cd ../..
          
          # Start the deployment
          aws amplify start-deployment \
            --app-id ${{ secrets.AMPLIFY_APP_ID }} \
            --branch-name main \
            --source-url build.zip
      
      - name: Notify on success
        if: ${{ success() && secrets.SLACK_WEBHOOK != '' }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: ci-cd
          SLACK_COLOR: good
          SLACK_TITLE: Deploy Successful
          SLACK_MESSAGE: 'App deployed successfully to AWS Amplify! :rocket:'
          SLACK_FOOTER: 'Flutter CI/CD Pipeline'