// Mocks generated by Mockito 5.4.6 from annotations
// in flutter_application_1/test/integration/notification_flow_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:flutter_application_1/core/models/appointment_model.dart'
    as _i2;
import 'package:flutter_application_1/core/models/notification_action_model.dart'
    as _i5;
import 'package:flutter_application_1/core/services/notification_service.dart'
    as _i3;
import 'package:flutter_application_1/features/appointments/services/appointments_service_v2.dart'
    as _i7;
import 'package:flutter_local_notifications/flutter_local_notifications.dart'
    as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAppointment_0 extends _i1.SmartFake implements _i2.Appointment {
  _FakeAppointment_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [NotificationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNotificationService extends _i1.Mock
    implements _i3.NotificationService {
  MockNotificationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Stream<_i5.NotificationAction> get actionStream => (super.noSuchMethod(
        Invocation.getter(#actionStream),
        returnValue: _i4.Stream<_i5.NotificationAction>.empty(),
      ) as _i4.Stream<_i5.NotificationAction>);

  @override
  void setNotificationsPlugin(_i6.FlutterLocalNotificationsPlugin? plugin) =>
      super.noSuchMethod(
        Invocation.method(
          #setNotificationsPlugin,
          [plugin],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<void> testHandleConfirmAction(String? appointmentId) =>
      (super.noSuchMethod(
        Invocation.method(
          #testHandleConfirmAction,
          [appointmentId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> scheduleAppointmentReminders(_i2.Appointment? appointment) =>
      (super.noSuchMethod(
        Invocation.method(
          #scheduleAppointmentReminders,
          [appointment],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> cancelAppointmentNotifications(String? appointmentId) =>
      (super.noSuchMethod(
        Invocation.method(
          #cancelAppointmentNotifications,
          [appointmentId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> cancelAllNotifications() => (super.noSuchMethod(
        Invocation.method(
          #cancelAllNotifications,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [AppointmentsServiceV2].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppointmentsServiceV2 extends _i1.Mock
    implements _i7.AppointmentsServiceV2 {
  MockAppointmentsServiceV2() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<Map<String, dynamic>> createAppointment({
    required String? professionalId,
    required String? serviceId,
    required DateTime? appointmentDateTime,
    required String? clientName,
    required String? clientPhone,
    required String? service,
    required double? price,
    String? notes,
    String? clientId,
    int? duration,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createAppointment,
          [],
          {
            #professionalId: professionalId,
            #serviceId: serviceId,
            #appointmentDateTime: appointmentDateTime,
            #clientName: clientName,
            #clientPhone: clientPhone,
            #service: service,
            #price: price,
            #notes: notes,
            #clientId: clientId,
            #duration: duration,
          },
        ),
        returnValue:
            _i4.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i4.Future<Map<String, dynamic>>);

  @override
  _i4.Future<Map<String, dynamic>> getAppointmentById(String? appointmentId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAppointmentById,
          [appointmentId],
        ),
        returnValue:
            _i4.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i4.Future<Map<String, dynamic>>);

  @override
  _i4.Future<Map<String, dynamic>> getAppointments({
    String? status,
    DateTime? date,
    String? clientId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAppointments,
          [],
          {
            #status: status,
            #date: date,
            #clientId: clientId,
          },
        ),
        returnValue:
            _i4.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i4.Future<Map<String, dynamic>>);

  @override
  _i4.Future<bool> checkTimeConflict(
    DateTime? appointmentDateTime,
    int? durationMinutes,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #checkTimeConflict,
          [
            appointmentDateTime,
            durationMinutes,
          ],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<Map<String, dynamic>> updateAppointmentStatus(
    String? appointmentId,
    String? newStatus,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateAppointmentStatus,
          [
            appointmentId,
            newStatus,
          ],
        ),
        returnValue:
            _i4.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i4.Future<Map<String, dynamic>>);

  @override
  _i4.Future<Map<String, dynamic>> updateAppointment(
    String? appointmentId,
    Map<String, dynamic>? appointmentData,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateAppointment,
          [
            appointmentId,
            appointmentData,
          ],
        ),
        returnValue:
            _i4.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i4.Future<Map<String, dynamic>>);

  @override
  _i4.Future<Map<String, dynamic>> deleteAppointment(String? appointmentId) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteAppointment,
          [appointmentId],
        ),
        returnValue:
            _i4.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i4.Future<Map<String, dynamic>>);

  @override
  _i4.Future<List<_i2.Appointment>> getAppointmentsList({String? status}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAppointmentsList,
          [],
          {#status: status},
        ),
        returnValue:
            _i4.Future<List<_i2.Appointment>>.value(<_i2.Appointment>[]),
      ) as _i4.Future<List<_i2.Appointment>>);

  @override
  _i4.Future<List<_i2.Appointment>> getClientAppointments(String? clientId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getClientAppointments,
          [clientId],
        ),
        returnValue:
            _i4.Future<List<_i2.Appointment>>.value(<_i2.Appointment>[]),
      ) as _i4.Future<List<_i2.Appointment>>);

  @override
  _i4.Future<_i2.Appointment> createAppointmentModel({
    required String? professionalId,
    required String? serviceId,
    required DateTime? appointmentDateTime,
    required String? clientName,
    required String? clientPhone,
    required String? service,
    required double? price,
    String? notes,
    String? clientId,
    int? duration,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createAppointmentModel,
          [],
          {
            #professionalId: professionalId,
            #serviceId: serviceId,
            #appointmentDateTime: appointmentDateTime,
            #clientName: clientName,
            #clientPhone: clientPhone,
            #service: service,
            #price: price,
            #notes: notes,
            #clientId: clientId,
            #duration: duration,
          },
        ),
        returnValue: _i4.Future<_i2.Appointment>.value(_FakeAppointment_0(
          this,
          Invocation.method(
            #createAppointmentModel,
            [],
            {
              #professionalId: professionalId,
              #serviceId: serviceId,
              #appointmentDateTime: appointmentDateTime,
              #clientName: clientName,
              #clientPhone: clientPhone,
              #service: service,
              #price: price,
              #notes: notes,
              #clientId: clientId,
              #duration: duration,
            },
          ),
        )),
      ) as _i4.Future<_i2.Appointment>);
}
