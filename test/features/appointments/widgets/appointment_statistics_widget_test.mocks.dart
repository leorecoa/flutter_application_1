// Mocks generated by Mockito 5.4.6 from annotations
// in flutter_application_1/test/features/appointments/widgets/appointment_statistics_widget_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i3;
import 'package:riverpod/src/common.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAsyncValue_0<T1> extends _i1.SmartFake
    implements _i2.AsyncValue<T1> {
  _FakeAsyncValue_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [AsyncValue].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockAsyncValue<T> extends _i1.Mock implements _i2.AsyncValue<T> {
  MockAsyncValue() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isLoading =>
      (super.noSuchMethod(Invocation.getter(#isLoading), returnValue: false)
          as bool);

  @override
  bool get hasValue =>
      (super.noSuchMethod(Invocation.getter(#hasValue), returnValue: false)
          as bool);

  @override
  R map<R>({
    required R Function(_i2.AsyncData<T>)? data,
    required R Function(_i2.AsyncError<T>)? error,
    required R Function(_i2.AsyncLoading<T>)? loading,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#map, [], {
              #data: data,
              #error: error,
              #loading: loading,
            }),
            returnValue: _i3.dummyValue<R>(
              this,
              Invocation.method(#map, [], {
                #data: data,
                #error: error,
                #loading: loading,
              }),
            ),
          )
          as R);

  @override
  _i2.AsyncValue<T> copyWithPrevious(
    _i2.AsyncValue<T>? previous, {
    bool? isRefresh = true,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #copyWithPrevious,
              [previous],
              {#isRefresh: isRefresh},
            ),
            returnValue: _FakeAsyncValue_0<T>(
              this,
              Invocation.method(
                #copyWithPrevious,
                [previous],
                {#isRefresh: isRefresh},
              ),
            ),
          )
          as _i2.AsyncValue<T>);

  @override
  _i2.AsyncValue<T> unwrapPrevious() =>
      (super.noSuchMethod(
            Invocation.method(#unwrapPrevious, []),
            returnValue: _FakeAsyncValue_0<T>(
              this,
              Invocation.method(#unwrapPrevious, []),
            ),
          )
          as _i2.AsyncValue<T>);
}
