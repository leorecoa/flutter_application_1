// Mocks generated by Mockito 5.4.6 from annotations
// in flutter_application_1/test/features/appointments/domain/usecases/appointment_usecases_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:flutter_application_1/core/models/appointment_model.dart'
    as _i2;
import 'package:flutter_application_1/core/services/notification_service.dart'
    as _i5;
import 'package:flutter_application_1/features/appointments/domain/appointment_repository.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAppointment_0 extends _i1.SmartFake implements _i2.Appointment {
  _FakeAppointment_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [AppointmentRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppointmentRepository extends _i1.Mock
    implements _i3.AppointmentRepository {
  MockAppointmentRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i2.Appointment>> getAllAppointments() =>
      (super.noSuchMethod(
            Invocation.method(#getAllAppointments, []),
            returnValue: _i4.Future<List<_i2.Appointment>>.value(
              <_i2.Appointment>[],
            ),
          )
          as _i4.Future<List<_i2.Appointment>>);

  @override
  _i4.Future<List<_i2.Appointment>> getPaginatedAppointments({
    required int? page,
    required int? pageSize,
    Map<String, dynamic>? filters,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getPaginatedAppointments, [], {
              #page: page,
              #pageSize: pageSize,
              #filters: filters,
            }),
            returnValue: _i4.Future<List<_i2.Appointment>>.value(
              <_i2.Appointment>[],
            ),
          )
          as _i4.Future<List<_i2.Appointment>>);

  @override
  _i4.Future<_i2.Appointment> createAppointment(_i2.Appointment? appointment) =>
      (super.noSuchMethod(
            Invocation.method(#createAppointment, [appointment]),
            returnValue: _i4.Future<_i2.Appointment>.value(
              _FakeAppointment_0(
                this,
                Invocation.method(#createAppointment, [appointment]),
              ),
            ),
          )
          as _i4.Future<_i2.Appointment>);

  @override
  _i4.Future<_i2.Appointment> updateAppointment(_i2.Appointment? appointment) =>
      (super.noSuchMethod(
            Invocation.method(#updateAppointment, [appointment]),
            returnValue: _i4.Future<_i2.Appointment>.value(
              _FakeAppointment_0(
                this,
                Invocation.method(#updateAppointment, [appointment]),
              ),
            ),
          )
          as _i4.Future<_i2.Appointment>);

  @override
  _i4.Future<void> deleteAppointment(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteAppointment, [id]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<_i2.Appointment> updateAppointmentStatus(
    String? id,
    _i2.AppointmentStatus? status,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateAppointmentStatus, [id, status]),
            returnValue: _i4.Future<_i2.Appointment>.value(
              _FakeAppointment_0(
                this,
                Invocation.method(#updateAppointmentStatus, [id, status]),
              ),
            ),
          )
          as _i4.Future<_i2.Appointment>);

  @override
  _i4.Future<_i2.Appointment> updateClientConfirmation(
    String? id,
    bool? isConfirmed,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateClientConfirmation, [id, isConfirmed]),
            returnValue: _i4.Future<_i2.Appointment>.value(
              _FakeAppointment_0(
                this,
                Invocation.method(#updateClientConfirmation, [id, isConfirmed]),
              ),
            ),
          )
          as _i4.Future<_i2.Appointment>);

  @override
  _i4.Future<List<_i2.Appointment>> createBatchAppointments(
    List<_i2.Appointment>? appointments,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#createBatchAppointments, [appointments]),
            returnValue: _i4.Future<List<_i2.Appointment>>.value(
              <_i2.Appointment>[],
            ),
          )
          as _i4.Future<List<_i2.Appointment>>);

  @override
  _i4.Future<List<_i2.Appointment>> updateBatchStatus(
    List<String>? ids,
    _i2.AppointmentStatus? status,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateBatchStatus, [ids, status]),
            returnValue: _i4.Future<List<_i2.Appointment>>.value(
              <_i2.Appointment>[],
            ),
          )
          as _i4.Future<List<_i2.Appointment>>);
}

/// A class which mocks [NotificationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNotificationService extends _i1.Mock
    implements _i5.NotificationService {
  MockNotificationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> sendNotification(
    String? title,
    String? body, {
    Map<String, dynamic>? data,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#sendNotification, [title, body], {#data: data}),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> scheduleNotification(
    String? title,
    String? body,
    DateTime? scheduledTime, {
    Map<String, dynamic>? data,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #scheduleNotification,
              [title, body, scheduledTime],
              {#data: data},
            ),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> cancelNotification(String? notificationId) =>
      (super.noSuchMethod(
            Invocation.method(#cancelNotification, [notificationId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}
