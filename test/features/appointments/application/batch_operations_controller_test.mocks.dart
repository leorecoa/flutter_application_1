// Mocks generated by Mockito 5.4.6 from annotations
// in flutter_application_1/test/features/appointments/application/batch_operations_controller_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;

import 'package:flutter_application_1/core/models/appointment_model.dart'
    as _i3;
import 'package:flutter_application_1/core/models/paginated_response_model.dart'
    as _i2;
import 'package:flutter_application_1/core/services/appointments/i_appointments_service.dart'
    as _i7;
import 'package:flutter_application_1/core/services/notification_service.dart'
    as _i9;
import 'package:flutter_application_1/features/appointments/application/paginated_appointments_notifier.dart'
    as _i4;
import 'package:flutter_riverpod/flutter_riverpod.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i11;
import 'package:riverpod/src/internals.dart' as _i5;
import 'package:state_notifier/state_notifier.dart' as _i10;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakePaginatedResponse_0<T> extends _i1.SmartFake
    implements _i2.PaginatedResponse<T> {
  _FakePaginatedResponse_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeAppointment_1 extends _i1.SmartFake implements _i3.Appointment {
  _FakeAppointment_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakePaginatedAppointmentsState_2 extends _i1.SmartFake
    implements _i4.PaginatedAppointmentsState {
  _FakePaginatedAppointmentsState_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeProviderScheduler_3 extends _i1.SmartFake
    implements _i5.ProviderScheduler {
  _FakeProviderScheduler_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeProviderSubscription_4<State1> extends _i1.SmartFake
    implements _i6.ProviderSubscription<State1> {
  _FakeProviderSubscription_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeProviderElementBase_5<StateT> extends _i1.SmartFake
    implements _i6.ProviderElementBase<StateT> {
  _FakeProviderElementBase_5(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [IAppointmentsService].
///
/// See the documentation for Mockito's code generation for more information.
class MockIAppointmentsService extends _i1.Mock
    implements _i7.IAppointmentsService {
  MockIAppointmentsService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<Map<String, dynamic>> createAppointment({
    required String? professionalId,
    required String? serviceId,
    required DateTime? appointmentDateTime,
    required String? clientName,
    required String? clientPhone,
    required String? service,
    required double? price,
    String? notes,
    String? clientId,
    int? duration,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#createAppointment, [], {
              #professionalId: professionalId,
              #serviceId: serviceId,
              #appointmentDateTime: appointmentDateTime,
              #clientName: clientName,
              #clientPhone: clientPhone,
              #service: service,
              #price: price,
              #notes: notes,
              #clientId: clientId,
              #duration: duration,
            }),
            returnValue: _i8.Future<Map<String, dynamic>>.value(
              <String, dynamic>{},
            ),
          )
          as _i8.Future<Map<String, dynamic>>);

  @override
  _i8.Future<Map<String, dynamic>> getAppointmentById(String? appointmentId) =>
      (super.noSuchMethod(
            Invocation.method(#getAppointmentById, [appointmentId]),
            returnValue: _i8.Future<Map<String, dynamic>>.value(
              <String, dynamic>{},
            ),
          )
          as _i8.Future<Map<String, dynamic>>);

  @override
  _i8.Future<Map<String, dynamic>> getAppointments({
    String? status,
    DateTime? date,
    String? clientId,
    int? limit,
    String? lastKey,
    String? search,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getAppointments, [], {
              #status: status,
              #date: date,
              #clientId: clientId,
              #limit: limit,
              #lastKey: lastKey,
              #search: search,
            }),
            returnValue: _i8.Future<Map<String, dynamic>>.value(
              <String, dynamic>{},
            ),
          )
          as _i8.Future<Map<String, dynamic>>);

  @override
  _i8.Future<bool> checkTimeConflict(
    DateTime? appointmentDateTime,
    int? durationMinutes,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#checkTimeConflict, [
              appointmentDateTime,
              durationMinutes,
            ]),
            returnValue: _i8.Future<bool>.value(false),
          )
          as _i8.Future<bool>);

  @override
  _i8.Future<Map<String, dynamic>> updateAppointmentStatus(
    String? appointmentId,
    String? newStatus,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateAppointmentStatus, [
              appointmentId,
              newStatus,
            ]),
            returnValue: _i8.Future<Map<String, dynamic>>.value(
              <String, dynamic>{},
            ),
          )
          as _i8.Future<Map<String, dynamic>>);

  @override
  _i8.Future<Map<String, dynamic>> updateAppointment(
    String? appointmentId,
    Map<String, dynamic>? appointmentData,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateAppointment, [
              appointmentId,
              appointmentData,
            ]),
            returnValue: _i8.Future<Map<String, dynamic>>.value(
              <String, dynamic>{},
            ),
          )
          as _i8.Future<Map<String, dynamic>>);

  @override
  _i8.Future<Map<String, dynamic>> deleteAppointment(String? appointmentId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteAppointment, [appointmentId]),
            returnValue: _i8.Future<Map<String, dynamic>>.value(
              <String, dynamic>{},
            ),
          )
          as _i8.Future<Map<String, dynamic>>);

  @override
  _i8.Future<_i2.PaginatedResponse<_i3.Appointment>> getAppointmentsList({
    Map<String, dynamic>? filters,
    int? limit = 20,
    String? lastKey,
    String? searchTerm,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getAppointmentsList, [], {
              #filters: filters,
              #limit: limit,
              #lastKey: lastKey,
              #searchTerm: searchTerm,
            }),
            returnValue:
                _i8.Future<_i2.PaginatedResponse<_i3.Appointment>>.value(
                  _FakePaginatedResponse_0<_i3.Appointment>(
                    this,
                    Invocation.method(#getAppointmentsList, [], {
                      #filters: filters,
                      #limit: limit,
                      #lastKey: lastKey,
                      #searchTerm: searchTerm,
                    }),
                  ),
                ),
          )
          as _i8.Future<_i2.PaginatedResponse<_i3.Appointment>>);

  @override
  _i8.Future<List<_i3.Appointment>> getClientAppointments(String? clientId) =>
      (super.noSuchMethod(
            Invocation.method(#getClientAppointments, [clientId]),
            returnValue: _i8.Future<List<_i3.Appointment>>.value(
              <_i3.Appointment>[],
            ),
          )
          as _i8.Future<List<_i3.Appointment>>);

  @override
  _i8.Future<_i3.Appointment> createAppointmentModel({
    required String? professionalId,
    required String? serviceId,
    required DateTime? appointmentDateTime,
    required String? clientName,
    required String? clientPhone,
    required String? service,
    required double? price,
    String? notes,
    String? clientId,
    int? duration,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#createAppointmentModel, [], {
              #professionalId: professionalId,
              #serviceId: serviceId,
              #appointmentDateTime: appointmentDateTime,
              #clientName: clientName,
              #clientPhone: clientPhone,
              #service: service,
              #price: price,
              #notes: notes,
              #clientId: clientId,
              #duration: duration,
            }),
            returnValue: _i8.Future<_i3.Appointment>.value(
              _FakeAppointment_1(
                this,
                Invocation.method(#createAppointmentModel, [], {
                  #professionalId: professionalId,
                  #serviceId: serviceId,
                  #appointmentDateTime: appointmentDateTime,
                  #clientName: clientName,
                  #clientPhone: clientPhone,
                  #service: service,
                  #price: price,
                  #notes: notes,
                  #clientId: clientId,
                  #duration: duration,
                }),
              ),
            ),
          )
          as _i8.Future<_i3.Appointment>);
}

/// A class which mocks [NotificationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNotificationService extends _i1.Mock
    implements _i9.NotificationService {
  MockNotificationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<void> sendNotification(
    String? title,
    String? body, {
    Map<String, dynamic>? data,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#sendNotification, [title, body], {#data: data}),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<void> scheduleNotification(
    String? title,
    String? body,
    DateTime? scheduledTime, {
    Map<String, dynamic>? data,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #scheduleNotification,
              [title, body, scheduledTime],
              {#data: data},
            ),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<void> cancelNotification(String? notificationId) =>
      (super.noSuchMethod(
            Invocation.method(#cancelNotification, [notificationId]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);
}

/// A class which mocks [PaginatedAppointmentsNotifier].
///
/// See the documentation for Mockito's code generation for more information.
class MockPaginatedAppointmentsNotifier extends _i1.Mock
    implements _i4.PaginatedAppointmentsNotifier {
  MockPaginatedAppointmentsNotifier() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get mounted =>
      (super.noSuchMethod(Invocation.getter(#mounted), returnValue: false)
          as bool);

  @override
  _i8.Stream<_i4.PaginatedAppointmentsState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i8.Stream<_i4.PaginatedAppointmentsState>.empty(),
          )
          as _i8.Stream<_i4.PaginatedAppointmentsState>);

  @override
  _i4.PaginatedAppointmentsState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakePaginatedAppointmentsState_2(
              this,
              Invocation.getter(#state),
            ),
          )
          as _i4.PaginatedAppointmentsState);

  @override
  _i4.PaginatedAppointmentsState get debugState =>
      (super.noSuchMethod(
            Invocation.getter(#debugState),
            returnValue: _FakePaginatedAppointmentsState_2(
              this,
              Invocation.getter(#debugState),
            ),
          )
          as _i4.PaginatedAppointmentsState);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  set onError(_i6.ErrorListener? _onError) => super.noSuchMethod(
    Invocation.setter(#onError, _onError),
    returnValueForMissingStub: null,
  );

  @override
  set state(_i4.PaginatedAppointmentsState? value) => super.noSuchMethod(
    Invocation.setter(#state, value),
    returnValueForMissingStub: null,
  );

  @override
  _i8.Future<void> fetchFirstPage() =>
      (super.noSuchMethod(
            Invocation.method(#fetchFirstPage, []),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<void> fetchNextPage() =>
      (super.noSuchMethod(
            Invocation.method(#fetchNextPage, []),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<void> updateFilters(Map<String, dynamic>? filters) =>
      (super.noSuchMethod(
            Invocation.method(#updateFilters, [filters]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  bool updateShouldNotify(
    _i4.PaginatedAppointmentsState? old,
    _i4.PaginatedAppointmentsState? current,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateShouldNotify, [old, current]),
            returnValue: false,
          )
          as bool);

  @override
  _i6.RemoveListener addListener(
    _i10.Listener<_i4.PaginatedAppointmentsState>? listener, {
    bool? fireImmediately = true,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #addListener,
              [listener],
              {#fireImmediately: fireImmediately},
            ),
            returnValue: () {},
          )
          as _i6.RemoveListener);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [ProviderContainer].
///
/// See the documentation for Mockito's code generation for more information.
class MockProviderContainer extends _i1.Mock implements _i6.ProviderContainer {
  MockProviderContainer() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.ProviderScheduler get scheduler =>
      (super.noSuchMethod(
            Invocation.getter(#scheduler),
            returnValue: _FakeProviderScheduler_3(
              this,
              Invocation.getter(#scheduler),
            ),
          )
          as _i5.ProviderScheduler);

  @override
  int get depth =>
      (super.noSuchMethod(Invocation.getter(#depth), returnValue: 0) as int);

  @override
  List<_i6.ProviderObserver> get observers =>
      (super.noSuchMethod(
            Invocation.getter(#observers),
            returnValue: <_i6.ProviderObserver>[],
          )
          as List<_i6.ProviderObserver>);

  @override
  void Function(void Function()) get vsync =>
      (super.noSuchMethod(
            Invocation.getter(#vsync),
            returnValue: (void Function() task) {},
          )
          as void Function(void Function()));

  @override
  List<_i6.ProviderContainer> get debugChildren =>
      (super.noSuchMethod(
            Invocation.getter(#debugChildren),
            returnValue: <_i6.ProviderContainer>[],
          )
          as List<_i6.ProviderContainer>);

  @override
  set vsyncOverride(void Function(void Function())? _vsyncOverride) =>
      super.noSuchMethod(
        Invocation.setter(#vsyncOverride, _vsyncOverride),
        returnValueForMissingStub: null,
      );

  @override
  set debugCanModifyProviders(void Function()? _debugCanModifyProviders) =>
      super.noSuchMethod(
        Invocation.setter(#debugCanModifyProviders, _debugCanModifyProviders),
        returnValueForMissingStub: null,
      );

  @override
  bool hasStateReaderFor(_i6.ProviderListenable<Object?>? provider) =>
      (super.noSuchMethod(
            Invocation.method(#hasStateReaderFor, [provider]),
            returnValue: false,
          )
          as bool);

  @override
  _i8.Future<void> pump() =>
      (super.noSuchMethod(
            Invocation.method(#pump, []),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  Result read<Result>(_i6.ProviderListenable<Result>? provider) =>
      (super.noSuchMethod(
            Invocation.method(#read, [provider]),
            returnValue: _i11.dummyValue<Result>(
              this,
              Invocation.method(#read, [provider]),
            ),
          )
          as Result);

  @override
  bool exists(_i6.ProviderBase<Object?>? provider) =>
      (super.noSuchMethod(
            Invocation.method(#exists, [provider]),
            returnValue: false,
          )
          as bool);

  @override
  void debugReassemble() => super.noSuchMethod(
    Invocation.method(#debugReassemble, []),
    returnValueForMissingStub: null,
  );

  @override
  _i6.ProviderSubscription<State> listen<State>(
    _i6.ProviderListenable<State>? provider,
    void Function(State?, State)? listener, {
    bool? fireImmediately = false,
    void Function(Object, StackTrace)? onError,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #listen,
              [provider, listener],
              {#fireImmediately: fireImmediately, #onError: onError},
            ),
            returnValue: _FakeProviderSubscription_4<State>(
              this,
              Invocation.method(
                #listen,
                [provider, listener],
                {#fireImmediately: fireImmediately, #onError: onError},
              ),
            ),
          )
          as _i6.ProviderSubscription<State>);

  @override
  void invalidate(_i6.ProviderOrFamily? provider) => super.noSuchMethod(
    Invocation.method(#invalidate, [provider]),
    returnValueForMissingStub: null,
  );

  @override
  State refresh<State>(_i6.Refreshable<State>? provider) =>
      (super.noSuchMethod(
            Invocation.method(#refresh, [provider]),
            returnValue: _i11.dummyValue<State>(
              this,
              Invocation.method(#refresh, [provider]),
            ),
          )
          as State);

  @override
  void updateOverrides(List<_i6.Override>? overrides) => super.noSuchMethod(
    Invocation.method(#updateOverrides, [overrides]),
    returnValueForMissingStub: null,
  );

  @override
  _i6.ProviderElementBase<State> readProviderElement<State>(
    _i6.ProviderBase<State>? provider,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#readProviderElement, [provider]),
            returnValue: _FakeProviderElementBase_5<State>(
              this,
              Invocation.method(#readProviderElement, [provider]),
            ),
          )
          as _i6.ProviderElementBase<State>);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  Iterable<_i6.ProviderElementBase<dynamic>> getAllProviderElements() =>
      (super.noSuchMethod(
            Invocation.method(#getAllProviderElements, []),
            returnValue: <_i6.ProviderElementBase<dynamic>>[],
          )
          as Iterable<_i6.ProviderElementBase<dynamic>>);

  @override
  Iterable<_i6.ProviderElementBase<dynamic>> getAllProviderElementsInOrder() =>
      (super.noSuchMethod(
            Invocation.method(#getAllProviderElementsInOrder, []),
            returnValue: <_i6.ProviderElementBase<dynamic>>[],
          )
          as Iterable<_i6.ProviderElementBase<dynamic>>);
}
