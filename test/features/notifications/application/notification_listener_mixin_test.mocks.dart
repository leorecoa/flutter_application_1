// Mocks generated by Mockito 5.4.6 from annotations
// in flutter_application_1/test/features/notifications/application/notification_listener_mixin_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:flutter_application_1/core/models/appointment_model.dart'
    as _i6;
import 'package:flutter_application_1/core/models/notification_action_model.dart'
    as _i4;
import 'package:flutter_application_1/core/services/notification_service.dart'
    as _i2;
import 'package:flutter_local_notifications/flutter_local_notifications.dart'
    as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [NotificationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNotificationService extends _i1.Mock
    implements _i2.NotificationService {
  MockNotificationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Stream<_i4.NotificationAction> get actionStream => (super.noSuchMethod(
        Invocation.getter(#actionStream),
        returnValue: _i3.Stream<_i4.NotificationAction>.empty(),
      ) as _i3.Stream<_i4.NotificationAction>);

  @override
  void setNotificationsPlugin(_i5.FlutterLocalNotificationsPlugin? plugin) =>
      super.noSuchMethod(
        Invocation.method(
          #setNotificationsPlugin,
          [plugin],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Future<void> testHandleConfirmAction(String? appointmentId) =>
      (super.noSuchMethod(
        Invocation.method(
          #testHandleConfirmAction,
          [appointmentId],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> scheduleAppointmentReminders(_i6.Appointment? appointment) =>
      (super.noSuchMethod(
        Invocation.method(
          #scheduleAppointmentReminders,
          [appointment],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> cancelAppointmentNotifications(String? appointmentId) =>
      (super.noSuchMethod(
        Invocation.method(
          #cancelAppointmentNotifications,
          [appointmentId],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> cancelAllNotifications() => (super.noSuchMethod(
        Invocation.method(
          #cancelAllNotifications,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
