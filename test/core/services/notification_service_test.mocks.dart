// Mocks generated by Mockito 5.4.6 from annotations
// in flutter_application_1/test/core/services/notification_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:flutter_application_1/core/models/appointment_model.dart'
    as _i2;
import 'package:flutter_application_1/features/appointments/services/appointments_service_v2.dart'
    as _i12;
import 'package:flutter_local_notifications/src/flutter_local_notifications_plugin.dart'
    as _i3;
import 'package:flutter_local_notifications/src/initialization_settings.dart'
    as _i5;
import 'package:flutter_local_notifications/src/notification_details.dart'
    as _i7;
import 'package:flutter_local_notifications/src/platform_specifics/android/schedule_mode.dart'
    as _i10;
import 'package:flutter_local_notifications/src/platform_specifics/ios/enums.dart'
    as _i9;
import 'package:flutter_local_notifications/src/types.dart' as _i11;
import 'package:flutter_local_notifications_platform_interface/flutter_local_notifications_platform_interface.dart'
    as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:timezone/timezone.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAppointment_0 extends _i1.SmartFake implements _i2.Appointment {
  _FakeAppointment_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [FlutterLocalNotificationsPlugin].
///
/// See the documentation for Mockito's code generation for more information.
class MockFlutterLocalNotificationsPlugin extends _i1.Mock
    implements _i3.FlutterLocalNotificationsPlugin {
  MockFlutterLocalNotificationsPlugin() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool?> initialize(
    _i5.InitializationSettings? initializationSettings, {
    _i6.DidReceiveNotificationResponseCallback?
    onDidReceiveNotificationResponse,
    _i6.DidReceiveBackgroundNotificationResponseCallback?
    onDidReceiveBackgroundNotificationResponse,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #initialize,
              [initializationSettings],
              {
                #onDidReceiveNotificationResponse:
                    onDidReceiveNotificationResponse,
                #onDidReceiveBackgroundNotificationResponse:
                    onDidReceiveBackgroundNotificationResponse,
              },
            ),
            returnValue: _i4.Future<bool?>.value(),
          )
          as _i4.Future<bool?>);

  @override
  _i4.Future<_i6.NotificationAppLaunchDetails?>
  getNotificationAppLaunchDetails() =>
      (super.noSuchMethod(
            Invocation.method(#getNotificationAppLaunchDetails, []),
            returnValue: _i4.Future<_i6.NotificationAppLaunchDetails?>.value(),
          )
          as _i4.Future<_i6.NotificationAppLaunchDetails?>);

  @override
  _i4.Future<void> show(
    int? id,
    String? title,
    String? body,
    _i7.NotificationDetails? notificationDetails, {
    String? payload,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #show,
              [id, title, body, notificationDetails],
              {#payload: payload},
            ),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> cancel(int? id, {String? tag}) =>
      (super.noSuchMethod(
            Invocation.method(#cancel, [id], {#tag: tag}),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> cancelAll() =>
      (super.noSuchMethod(
            Invocation.method(#cancelAll, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> zonedSchedule(
    int? id,
    String? title,
    String? body,
    _i8.TZDateTime? scheduledDate,
    _i7.NotificationDetails? notificationDetails, {
    required _i9.UILocalNotificationDateInterpretation?
    uiLocalNotificationDateInterpretation,
    bool? androidAllowWhileIdle = false,
    _i10.AndroidScheduleMode? androidScheduleMode,
    String? payload,
    _i11.DateTimeComponents? matchDateTimeComponents,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #zonedSchedule,
              [id, title, body, scheduledDate, notificationDetails],
              {
                #uiLocalNotificationDateInterpretation:
                    uiLocalNotificationDateInterpretation,
                #androidAllowWhileIdle: androidAllowWhileIdle,
                #androidScheduleMode: androidScheduleMode,
                #payload: payload,
                #matchDateTimeComponents: matchDateTimeComponents,
              },
            ),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> periodicallyShow(
    int? id,
    String? title,
    String? body,
    _i6.RepeatInterval? repeatInterval,
    _i7.NotificationDetails? notificationDetails, {
    String? payload,
    bool? androidAllowWhileIdle = false,
    _i10.AndroidScheduleMode? androidScheduleMode,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #periodicallyShow,
              [id, title, body, repeatInterval, notificationDetails],
              {
                #payload: payload,
                #androidAllowWhileIdle: androidAllowWhileIdle,
                #androidScheduleMode: androidScheduleMode,
              },
            ),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<List<_i6.PendingNotificationRequest>>
  pendingNotificationRequests() =>
      (super.noSuchMethod(
            Invocation.method(#pendingNotificationRequests, []),
            returnValue: _i4.Future<List<_i6.PendingNotificationRequest>>.value(
              <_i6.PendingNotificationRequest>[],
            ),
          )
          as _i4.Future<List<_i6.PendingNotificationRequest>>);

  @override
  _i4.Future<List<_i6.ActiveNotification>> getActiveNotifications() =>
      (super.noSuchMethod(
            Invocation.method(#getActiveNotifications, []),
            returnValue: _i4.Future<List<_i6.ActiveNotification>>.value(
              <_i6.ActiveNotification>[],
            ),
          )
          as _i4.Future<List<_i6.ActiveNotification>>);
}

/// A class which mocks [AppointmentsServiceV2].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppointmentsServiceV2 extends _i1.Mock
    implements _i12.AppointmentsServiceV2 {
  MockAppointmentsServiceV2() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Appointment> createAppointment({
    required String? professionalId,
    required String? serviceId,
    required DateTime? appointmentDateTime,
    required String? clientName,
    required String? clientPhone,
    required String? service,
    required double? price,
    String? notes,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#createAppointment, [], {
              #professionalId: professionalId,
              #serviceId: serviceId,
              #appointmentDateTime: appointmentDateTime,
              #clientName: clientName,
              #clientPhone: clientPhone,
              #service: service,
              #price: price,
              #notes: notes,
            }),
            returnValue: _i4.Future<_i2.Appointment>.value(
              _FakeAppointment_0(
                this,
                Invocation.method(#createAppointment, [], {
                  #professionalId: professionalId,
                  #serviceId: serviceId,
                  #appointmentDateTime: appointmentDateTime,
                  #clientName: clientName,
                  #clientPhone: clientPhone,
                  #service: service,
                  #price: price,
                  #notes: notes,
                }),
              ),
            ),
          )
          as _i4.Future<_i2.Appointment>);

  @override
  _i4.Future<List<_i2.Appointment>> getAppointments({String? status}) =>
      (super.noSuchMethod(
            Invocation.method(#getAppointments, [], {#status: status}),
            returnValue: _i4.Future<List<_i2.Appointment>>.value(
              <_i2.Appointment>[],
            ),
          )
          as _i4.Future<List<_i2.Appointment>>);

  @override
  _i4.Future<_i2.Appointment> updateAppointmentStatus(
    String? appointmentId,
    _i2.AppointmentStatus? newStatus,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateAppointmentStatus, [
              appointmentId,
              newStatus,
            ]),
            returnValue: _i4.Future<_i2.Appointment>.value(
              _FakeAppointment_0(
                this,
                Invocation.method(#updateAppointmentStatus, [
                  appointmentId,
                  newStatus,
                ]),
              ),
            ),
          )
          as _i4.Future<_i2.Appointment>);

  @override
  _i4.Future<List<_i2.Appointment>> getAppointmentsList({String? status}) =>
      (super.noSuchMethod(
            Invocation.method(#getAppointmentsList, [], {#status: status}),
            returnValue: _i4.Future<List<_i2.Appointment>>.value(
              <_i2.Appointment>[],
            ),
          )
          as _i4.Future<List<_i2.Appointment>>);

  @override
  _i4.Future<_i2.Appointment> updateAppointment(_i2.Appointment? appointment) =>
      (super.noSuchMethod(
            Invocation.method(#updateAppointment, [appointment]),
            returnValue: _i4.Future<_i2.Appointment>.value(
              _FakeAppointment_0(
                this,
                Invocation.method(#updateAppointment, [appointment]),
              ),
            ),
          )
          as _i4.Future<_i2.Appointment>);

  @override
  _i4.Future<void> deleteAppointment(String? appointmentId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteAppointment, [appointmentId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<List<_i2.Appointment>> createBatchAppointments(
    List<_i2.Appointment>? appointments,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#createBatchAppointments, [appointments]),
            returnValue: _i4.Future<List<_i2.Appointment>>.value(
              <_i2.Appointment>[],
            ),
          )
          as _i4.Future<List<_i2.Appointment>>);

  @override
  _i4.Future<List<_i2.Appointment>> updateBatchStatus(
    List<String>? ids,
    _i2.AppointmentStatus? status,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateBatchStatus, [ids, status]),
            returnValue: _i4.Future<List<_i2.Appointment>>.value(
              <_i2.Appointment>[],
            ),
          )
          as _i4.Future<List<_i2.Appointment>>);

  @override
  _i4.Future<_i2.Appointment> updateClientConfirmation(
    String? id,
    bool? isConfirmed,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateClientConfirmation, [id, isConfirmed]),
            returnValue: _i4.Future<_i2.Appointment>.value(
              _FakeAppointment_0(
                this,
                Invocation.method(#updateClientConfirmation, [id, isConfirmed]),
              ),
            ),
          )
          as _i4.Future<_i2.Appointment>);
}
