AWSTemplateFormatVersion: '2010-09-09'
Description: 'Auto Scaling Configuration for AgendaFÃ¡cil SaaS'

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - staging
      - prod
    Description: Environment name
    
  LambdaFunctionPrefix:
    Type: String
    Default: agenda-facil
    Description: Prefix for Lambda functions
    
  DynamoDBTableName:
    Type: String
    Default: AgendaFacilTable
    Description: Name of the DynamoDB table
    
  MinReadCapacity:
    Type: Number
    Default: 5
    Description: Minimum read capacity units
    
  MaxReadCapacity:
    Type: Number
    Default: 100
    Description: Maximum read capacity units
    
  MinWriteCapacity:
    Type: Number
    Default: 5
    Description: Minimum write capacity units
    
  MaxWriteCapacity:
    Type: Number
    Default: 100
    Description: Maximum write capacity units
    
  TargetUtilization:
    Type: Number
    Default: 70
    Description: Target utilization percentage
    
  ScaleInCooldown:
    Type: Number
    Default: 60
    Description: Scale in cooldown period in seconds
    
  ScaleOutCooldown:
    Type: Number
    Default: 60
    Description: Scale out cooldown period in seconds

Resources:
  # DynamoDB Table Auto Scaling - Read Capacity
  DynamoDBReadCapacityScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: !Ref MaxReadCapacity
      MinCapacity: !Ref MinReadCapacity
      ResourceId: !Sub 'table/${DynamoDBTableName}'
      RoleARN: !GetAtt DynamoDBScalingRole.Arn
      ScalableDimension: dynamodb:table:ReadCapacityUnits
      ServiceNamespace: dynamodb
      
  DynamoDBReadScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub '${Environment}-DynamoDBReadScalingPolicy'
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref DynamoDBReadCapacityScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: DynamoDBReadCapacityUtilization
        ScaleInCooldown: !Ref ScaleInCooldown
        ScaleOutCooldown: !Ref ScaleOutCooldown
        TargetValue: !Ref TargetUtilization
        
  # DynamoDB Table Auto Scaling - Write Capacity
  DynamoDBWriteCapacityScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: !Ref MaxWriteCapacity
      MinCapacity: !Ref MinWriteCapacity
      ResourceId: !Sub 'table/${DynamoDBTableName}'
      RoleARN: !GetAtt DynamoDBScalingRole.Arn
      ScalableDimension: dynamodb:table:WriteCapacityUnits
      ServiceNamespace: dynamodb
      
  DynamoDBWriteScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub '${Environment}-DynamoDBWriteScalingPolicy'
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref DynamoDBWriteCapacityScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: DynamoDBWriteCapacityUtilization
        ScaleInCooldown: !Ref ScaleInCooldown
        ScaleOutCooldown: !Ref ScaleOutCooldown
        TargetValue: !Ref TargetUtilization
        
  # DynamoDB GSI Auto Scaling - Read Capacity
  DynamoDBGSIReadCapacityScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: !Ref MaxReadCapacity
      MinCapacity: !Ref MinReadCapacity
      ResourceId: !Sub 'table/${DynamoDBTableName}/index/GSI1'
      RoleARN: !GetAtt DynamoDBScalingRole.Arn
      ScalableDimension: dynamodb:index:ReadCapacityUnits
      ServiceNamespace: dynamodb
      
  DynamoDBGSIReadScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub '${Environment}-DynamoDBGSIReadScalingPolicy'
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref DynamoDBGSIReadCapacityScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: DynamoDBReadCapacityUtilization
        ScaleInCooldown: !Ref ScaleInCooldown
        ScaleOutCooldown: !Ref ScaleOutCooldown
        TargetValue: !Ref TargetUtilization
        
  # DynamoDB GSI Auto Scaling - Write Capacity
  DynamoDBGSIWriteCapacityScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: !Ref MaxWriteCapacity
      MinCapacity: !Ref MinWriteCapacity
      ResourceId: !Sub 'table/${DynamoDBTableName}/index/GSI1'
      RoleARN: !GetAtt DynamoDBScalingRole.Arn
      ScalableDimension: dynamodb:index:WriteCapacityUnits
      ServiceNamespace: dynamodb
      
  DynamoDBGSIWriteScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub '${Environment}-DynamoDBGSIWriteScalingPolicy'
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref DynamoDBGSIWriteCapacityScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: DynamoDBWriteCapacityUtilization
        ScaleInCooldown: !Ref ScaleInCooldown
        ScaleOutCooldown: !Ref ScaleOutCooldown
        TargetValue: !Ref TargetUtilization
        
  # Lambda Provisioned Concurrency Auto Scaling
  LambdaProvisionedConcurrencyTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 50
      MinCapacity: 5
      ResourceId: !Sub 'function:${LambdaFunctionPrefix}-${Environment}-AppointmentsFunction:prod'
      RoleARN: !GetAtt LambdaScalingRole.Arn
      ScalableDimension: lambda:function:ProvisionedConcurrency
      ServiceNamespace: lambda
      
  LambdaProvisionedConcurrencyPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub '${Environment}-LambdaProvisionedConcurrencyPolicy'
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref LambdaProvisionedConcurrencyTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 0.7
        PredefinedMetricSpecification:
          PredefinedMetricType: LambdaProvisionedConcurrencyUtilization
        ScaleInCooldown: 300
        ScaleOutCooldown: 120
        
  # Time-based Lambda Provisioned Concurrency Scaling
  LambdaScheduledScalingUp:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub '${Environment}-LambdaScheduledScalingUp'
      PolicyType: StepScaling
      ScalingTargetId: !Ref LambdaProvisionedConcurrencyTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        MetricAggregationType: Average
        StepAdjustments:
          - MetricIntervalLowerBound: 0
            ScalingAdjustment: 20
            
  LambdaScheduledScalingDown:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub '${Environment}-LambdaScheduledScalingDown'
      PolicyType: StepScaling
      ScalingTargetId: !Ref LambdaProvisionedConcurrencyTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        MetricAggregationType: Average
        StepAdjustments:
          - MetricIntervalUpperBound: 0
            ScalingAdjustment: -15
            
  MorningScaleUpSchedule:
    Type: AWS::ApplicationAutoScaling::ScheduledAction
    Properties:
      ScheduledActionName: !Sub '${Environment}-MorningScaleUp'
      Schedule: 'cron(0 8 ? * MON-FRI *)'
      ScalableTargetAction:
        MinCapacity: 20
      ScalingTargetId: !Ref LambdaProvisionedConcurrencyTarget
      
  EveningScaleDownSchedule:
    Type: AWS::ApplicationAutoScaling::ScheduledAction
    Properties:
      ScheduledActionName: !Sub '${Environment}-EveningScaleDown'
      Schedule: 'cron(0 20 ? * MON-FRI *)'
      ScalableTargetAction:
        MinCapacity: 5
      ScalingTargetId: !Ref LambdaProvisionedConcurrencyTarget
      
  WeekendScaleDownSchedule:
    Type: AWS::ApplicationAutoScaling::ScheduledAction
    Properties:
      ScheduledActionName: !Sub '${Environment}-WeekendScaleDown'
      Schedule: 'cron(0 18 ? * FRI *)'
      ScalableTargetAction:
        MinCapacity: 3
      ScalingTargetId: !Ref LambdaProvisionedConcurrencyTarget
      
  WeekendScaleUpSchedule:
    Type: AWS::ApplicationAutoScaling::ScheduledAction
    Properties:
      ScheduledActionName: !Sub '${Environment}-WeekendScaleUp'
      Schedule: 'cron(0 8 ? * MON *)'
      ScalableTargetAction:
        MinCapacity: 10
      ScalingTargetId: !Ref LambdaProvisionedConcurrencyTarget
      
  # IAM Roles
  DynamoDBScalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: application-autoscaling.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonDynamoDBFullAccess
        
  LambdaScalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: application-autoscaling.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaRole

Outputs:
  DynamoDBReadScalingPolicyArn:
    Description: ARN of the DynamoDB read scaling policy
    Value: !Ref DynamoDBReadScalingPolicy
    
  DynamoDBWriteScalingPolicyArn:
    Description: ARN of the DynamoDB write scaling policy
    Value: !Ref DynamoDBWriteScalingPolicy
    
  LambdaProvisionedConcurrencyPolicyArn:
    Description: ARN of the Lambda provisioned concurrency scaling policy
    Value: !Ref LambdaProvisionedConcurrencyPolicy